const express = require("express");
const router = express.Router();
const User = require("../models/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const { body, validationResult } = require("express-validator");
const fetchuser = require("../middleware/fetchuser");
require("dotenv").config();

//JWT Secret key
const JWT_SECRET = process.env.REACT_APP_TOKEN_SECRET_KEY;
// ROUTE 1: Create a user using: POST /api/auth/createuser.No login required

router.post(
  "/createuser",
  [
    //Here we have to put all the validation checks
    body("name", "Enter a valid name!!").isLength({ min: 3 }),
    body("email", "Enter a valid email!!").isEmail(),
    body("password").isLength({ min: 5 }),
  ],
  async (req, res) => {
    let success = false;
    //If there are errors return Bad Request and the errors
    //validationResult() returns an objetc that contains the result of validation checks(In this case,the 3 checks mentioned above) performed on request
    const errors = validationResult(req);

    //If got an error during the above validation checks
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    //Check whether a user with this email already exists
    try {
      let user = await User.findOne({ email: req.body.email });
      //If user with same email exists,so return an error message
      if (user) {
        return res.status(400).json({
          success,
          error: "Sorry a user with this email already exists",
        });
      }

      //If the user does not exists,then need to store it in database
      //But in database,we will not store the user with the password user entered in the form
      //Need to store the user with the hashed password so as to prevent leakage of information even if database is attacked

      //Hash the user password using bcryptjs
      //During generation of hashed password,10 rounds of encoding should be performed
      const salt = await bcrypt.genSalt(10);
      const secPass = await bcrypt.hash(req.body.password, salt);

      //Create the user with the name,email filled by the user in the form and the hashed password
      user = await User.create({
        name: req.body.name,
        email: req.body.email,
        password: secPass,
      });

      const data = {
        user: {
          id: user.id,
        },
      };

      //jwt is used to authenticate user. It consists of 3 parts: header(algo),payload(data),signature(secret key)
      //jwt.sign() is used to generate a jwt token
      //data is the payload data that we want to include in jwt
      const authToken = jwt.sign(data, JWT_SECRET);
      //Whenever user is created,its authentication token generated by jwt is returned
      //Even if hacker gets this authetication token and puts in jwt,hacker cannot get the details until hacker has the secret key which forms the signature part
      success = true;
      res.json({ success, authToken });

      //   res.json(user);
      // res.json({"Message": "User successfully created"})
      //   .then((user) => res.json(user))
      //   .catch((err) => {
      //     console.log("Error is: ", err);
      //     res.json({
      //       error: "Please enter a unique value for email",
      //       message: err.message,
      //     });
      //   });
    } catch (error) {
      console.error(error.message);
      res.status(500).send("Internal Server error occurred");
    }
  }
);

// ROUTE 2: Create a user using: POST /api/auth/login.No login required
router.post(
  "/login",
  [
    //Here we have to put all the validation checks
    body("email", "Enter a valid email!!").isEmail(),
    //Checks if the password exists and is not empty
    body("password", "Password cannot be blank").exists(),
  ],
  async (req, res) => {
    let success = false;
    //If there are errors return Bad Request and the errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res
        .status(400)
        .json({ success, error: "Please enter a valid email" });
      // return res.status(400).json({success, errors: errors.array() });
    }

    //Form field values are typically stored in req.body
    //Extract the email and password from the form filled by the user
    const { email, password } = req.body;
    try {
      //Check if the user with that email exists in the database or not
      //Here if user exits,user.password will still contain the hashed password and not the plain string password
      let user = await User.findOne({ email });
      if (!user) {
        return res.status(400).json({
          error: "Please try to login with correct credentials ",
        });
      }

      //Compares the password entered by the user with the password stored with that user in the database
      const passwordCompare = await bcrypt.compare(password, user.password);
      if (!passwordCompare) {
        return res.status(400).json({
          success,
          error: "Please try to login with correct credentials ",
        });
      }

      //If user is autheticated,need to return the authetication token which indicates successful authentication
      const data = {
        user: {
          id: user.id,
        },
      };

      const authToken = jwt.sign(data, JWT_SECRET);
      //Since user is authenticated
      success = true;
      res.json({ success, authToken });
    } catch (error) {
      console.error(error.message);
      res.status(500).send("Internal Server error occurred");
    }
  }
);

// ROUTE 3: Create a user using: POST /api/auth/getuser.Login required
//Before executing the async function,fetchuser function will be executed in a way such that its contents are present here
router.post("/getuser", fetchuser, async (req, res) => {
  try {
    //req.user contains the information of the user whose token is verified by jwt
    const userId = req.user.id;

    //If the user exists with that id,get all its information except the password
    const user = await User.findById(userId).select("-password");
    res.send(user);
  } catch (error) {
    console.error(error.message);
    res.status(500).send("Error is Internal Server error occurred");
  }
});

module.exports = router;
